// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// This file contains generic code for implementing basic methods
// for each student such as references, Get by ID, Update, etc...
// If you're not modifying these functions, you shouldn't have to worry
// about regenerating code. However, if you updated this file, to update
// the changes for each of the students you would have to install
// genny https://github.com/cheekybits/genny and run go generate.

package database

import (
	"context"
	"encoding/json"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// StudentRef is a reference to a Student which, when serialized, will return
// the json of the referenced object.
//
// Be careful for circular references.
type StudentRef primitive.ObjectID

func (ref StudentRef) GetBSON() (interface{}, error) {
	return primitive.ObjectID(ref), nil
}

func (ref StudentRef) MarshalJSON() ([]byte, error) {
	obj, found := DB.GetStudentByID(primitive.ObjectID(ref))
	if !found {
		return nil, fmt.Errorf("could not find Student with id %s", ref)
	}

	return json.Marshal(obj)
}

// Same functionality is ObjectID.UnmarshalJSON except it returns an error if the referenced object doesn't exist
func (ref *StudentRef) UnmarshalJSON(b []byte) error {
	id := primitive.ObjectID(*ref)
	if err := id.UnmarshalJSON(b); err != nil {
		return err
	}
	_, found := DB.GetStudentByID(id)
	if !found {
		return fmt.Errorf("object not found")
	}

	*ref = StudentRef(id)
	return nil
}

// Gets the referenced object and panics if it doesn't exist
func (ref StudentRef) Get() Student {
	obj, found := DB.GetStudentByID(primitive.ObjectID(ref))
	if !found {
		panic("could not find object")
	}
	return obj
}

// Ref creates a reference to the object
func (obj Student) Ref() StudentRef {
	return StudentRef(obj.ID)
}

// CreateStudent creates a Student and adds it to the database. The
// ID element of the newly created Student will be set if it is successful
func (db *Database) CreateStudent(student *Student) {
	result, err := db.Collections.Students.InsertOne(context.TODO(), student)
	if err != nil {
		panic(err)
	}

	student.ID = result.InsertedID.(primitive.ObjectID)
}

// GetStudents returns a list of all students stored in the database.
func (db *Database) GetStudents() []Student {
	cur, err := db.Collections.Students.Find(context.TODO(), bson.D{})
	if err != nil {
		panic(err)
	}

	students := make([]Student, 0)
	if err := cur.All(context.TODO(), &students); err != nil {
		panic(err)
	}

	return students
}

// GetStudentByID gets a student by their ID. If not found, found will be false and
// err will be nil.
func (db *Database) GetStudentByID(id primitive.ObjectID) (student Student, found bool) {
	result := db.Collections.Students.FindOne(nil, bson.M{"_id": id})

	err := result.Err()
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return Student{}, false
		}
		panic(err)
	}

	if err := result.Decode(&student); err != nil {
		panic(err)
	}

	found = true
	return
}

// GetStudentByIDString gets a student by its ID as a string. If the ID could not be
// parsed into an object ID or the student could not be found, an error will be returned
func (db *Database) GetStudentByIDString(id string) (Student, error) {
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return Student{}, err
	}

	student, found := db.GetStudentByID(objectID)
	if !found {
		return Student{}, fmt.Errorf("no Students found with id %s", objectID.Hex())
	}

	return student, nil
}

// DeleteStudent deletes a student from the database by ID. If the student could not be
// found, success will be false
func (db *Database) DeleteStudent(id primitive.ObjectID) bool {
	result := db.Collections.Students.FindOneAndDelete(nil, bson.M{"_id": id})

	err := result.Err()
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return false
		}
		panic(err)
	}
	return true
}

// UpdateStudent finds a student by its ID and updates it
func (db *Database) UpdateStudent(id primitive.ObjectID, newStudent *Student) bool {
	result := db.Collections.Locations.FindOneAndUpdate(nil, bson.M{"_id": id}, bson.M{"$set": newStudent})
	err := result.Err()
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return false
		}
		panic(err)
	}

	err = result.Decode(newStudent)

	return true
}
